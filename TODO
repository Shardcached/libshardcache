 * allow to change the cache size and the number of workers at runtime

 * take advantage of pipelining in the inter-node communication.
   When new asyncrhonous requests are queued, instead of requesting a new filedescriptor to forward the
   request to a peer, if an aysnc request is already being running to that peer, just push the new request
   to the same connection.

 * create a new abstraction layer by introducing a shardcache_resource_t opaque structure and an API to access it.
   Such structure should be returned by any shardcache_* operation and encapsulates the result of the operation.
   If it's a get, the object returned by the arc subsystem will be retained, avoiding any copy.
   If the object is being fetched from a peer, the filedescriptor of the async operation will be available
   so that the operation itself can be safely cenceled

 * protocol V2 :
    - a new response header to distinguish between not-found and errors as response to
      GET/SET/OFFSET/HEAD commands

    - use a simple crc byte instead of the 8-bytes siphash signature (especially beneficial
      for chunked-signing). This also means that it's going to become a checksum and not a signature anymore  

    - introduce an extended GET command which returns the timestamp and the node responsible
      for the requested key as second and third record of the response (or perhaps some structure
      holding more meta-data as second record of the response)

    - extend set interface to allow controlling if the expiry time should be renewed when the key is
      accessed or not (and let it honor the initial expiration time).

    - introduce GET_MULTI and SET_MULTI commands.
      This will reduce the overhead of creating a sequence of get/set commands and also allow clients
      without knowledge of the complete shard (or always communicating with a single node) to still
      commence set_multi/get_multi commands but relying on the server to take care of parallelizing
      the operation if possible.

    - introduce a CAS command

    - introduce SET_INT GET_INT INCREMENT_INT DECREMENT_INT commands
      such commands will assume tha data is a 64bit integer (and store it as such)
      If the value retrieved from the storage is not exactly 64bits it will be discarded
      (and considered invalid). Direct access to the underlying data is still possible
      with the normal GET/SET semantic, but the byte-order of the retrieved/stored data
      is totally in control of the client.
      These commands are intended to facilitate atomic operations which involve integers
      (especially increment/decrement together with the CAS command)

    - support message compression

    NOTE: V2 implementation must ensure compatibility with V1 clients which, as long as the
          changes are the ones described above, means using the old response header when
          answering to a failing GET/SET/OFFSET/HEAD command.

 * complete and test the replica support

 * parallelize migrations

 * extend the storage API to allow asynchronous fetches.
   Adding a fetch_async callback to the storage structure would be the easiest. Then arc_ops will
   also expose a fetch_async which will be called by arc_lookup() if used in async mode,
   otherwise the synchronous interface will still be used.

 * refactor the API actually exposed to set internal shardcache flags and options
   once an instance has been created. The way it's actually implemented is suboptimal
   because adding a new option requires to add both a member to the shardcache_t structure
   and a new function exposed by the shardcache library. Since options and flags are growing
   and there will be probably more in the future, there is already the need of a proper
   API to allow getting/setting internal flags and params and a better way of storing
   those within the shardcache_t structure

* remove the distinction between synchronous and asynchronous api calls,
  they should all be asynchronous by default and require a callback among the arguments
  (this means renaming shardcache_*_async &co as their synchronous counterparts and getting
   rid of the old implementations)

* document the internal APIs (messaging.h, shardcache_internal.h, arc_ops.h, arc.h)
