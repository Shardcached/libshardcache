The internal communication protocol may described by the following grammar:

MESSAGE              : <NOOP> | <MSG> | <SIG> | <RESPONSE> | <EMPTY_RESPONSE>
NOOP                 : <MSG_NOOP>
MSG_NOOP             : 0x90
MSG                  : <MAGIC><HDR><RECORD>[<RSEP><RECORD>...]<EOM>
MAGIC                : <MAGIC_BYTES><VERSION>
MAGIC_BYTES          : <0x73><0x68><0x63>
VERSION              : <BYTE>
HDR                  : <MSG_GET> | <MSG_SET> | <MSG_DELETE> | <MSG_EVICT> |
                       <MSG_GET_ASYNC> | <MSG_GET_OFFSET> |
                       <MSG_GET_INDEX> | <MSG_INDEX_RESPONSE> |
                       <MSG_ADD> | <MSG_EXISTS> | <MSG_TOUCH> |
                       <MSG_MIGRATION_BEGIN> | <MSG_MIGRATION_ABORT> | <MSG_MIGRATION_END> |
                       <MSG_CHECK> | <MSG_STATS> |
                       <MSG_REPLICA_COMMAND> | <MSG_REPLICA_RESPONSE> |
                       <MSG_REPLICA_PING> | <MSG_REPLICA_ACK>
MSG_GET              : 0x01
MSG_SET              : 0x02
MSG_DELETE           : 0x03
MSG_EVICT            : 0x04
MSG_GET_ASYNC        : 0x05
MSG_GET_OFFSET       : 0x06
MSG_ADD              : 0x07
MSG_EXISTS           : 0x08
MSG_TOUCH            : 0x09
MSG_CAS              : 0x0A
MSG_GET_MULTI        : 0x0B
MSG_SET_MULTI        : 0x0C
MSG_DELETE_MULTI     : 0x0D
MSG_EVICT_MULTI      : 0x0E
MSG_INCREMENT        : 0x10
MSG_DECREMENT        : 0x11
MSG_MIGRATION_ABORT  : 0x21
MSG_MIGRATION_BEGIN  : 0x22
MSG_MIGRATION_END    : 0x23
MSG_CHECK            : 0x31
MSG_STATS            : 0x32
MSG_GET_INDEX        : 0x41
MSG_INDEX_RESPONSE   : 0x42
MSG_SET_CACHE_SIZE   : 0x80
MSG_SET_NUM_WORKERS  : 0x81
MSG_RESET            : 0x82
MSG_REPLICA_COMMAND  : 0xA0
MSG_REPLICA_RESPONSE : 0xA1
MSG_REPLICA_PING     : 0xA2
MSG_REPLICA_ACK      : 0xA3
RECORD               : <SIZE><DATA>[<SIZE><DATA>...]<EOR> | <NULL_RECORD>
SIZE                 : <WORD>
WORD                 : <BYTE_HIGH><BYTE_LOW>
BYTE_HIGH            : <BYTE>
BYTE_LOW             : <BYTE>
BYTE                 : 0x00 - 0xFF
DATA                 : <BYTE>...<BYTE>
EOR                  : <NULL_BYTE><NULL_BYTE>
NULL_BYTE            : 0x00
NULL_RECORD          : <EOR>
RSEP                 : 0x80
EOM                  : <NULL_BYTE>
RESPONSE             : <MSG_RESPONSE><1-SIZE><RESPONSE_BYTE><EOR><EOM>
MSG_RESPONSE         : 0x99
<1-SIZE>             : <0x00><0x01>
RESPONSE_BYTE        : <OK> | <ERR> | <YES> | <NO> | <EXISTS>
OK                   : 0x00
ERR                  : 0xff
YES                  : 0x01
NO                   : 0xfe
EXISTS               : 0x02
RESPONSE_STATUS      : <RECORD[STATUS]>
RESPONSE_BSTATUS     : <RECORD[BSTATUS]>
RESPONSE_CSTATUS     : <RECORD[CSTATUS]>
STATUS               : <OK> | <ERR>
BSTATUS              : <YES> | <NO>
CSTATUS              : <OK> | <ERR> | <EXISTS>
EMPTY_RESPONSE       : <MSG_RESPONSE><NULL_RECORD><EOM>

-------------------------------------------------------------------------------

Extra definitions:

KEY                  : <RECORD>
VALUE                : <RECORD>
TTL                  : <RECORD>
INDEX_RECORD         : <RECORD[INDEX]>
INDEX                : <KSIZE><KDATA><VSIZE>[<KSIZE><KDATA><VSIZE>...]<EOR>
KSIZE                : <LONG_SIZE>
LONG_SIZE            : <DOUBLE_WORD>
DOUBLE_WORD          : <WORD_HIGH><WORD_LOW>
WORD_HIGH            : <WORD>
WORD_LOW             : <WORD>
KDATA                : <DATA>
VSIZE                : <LONG_SIZE>
OFFSET               : <RECORD[LONG_SIZE]>
LONG_LONG_SIZE:      : <QUAD_WORD>
QUAD_WORD            : <DOUBLE_WORD_HIGH><DOUBLE_WORD_LOW>
DOUBLE_WORD_HIGH     : <DOUBLE_WORD>
DOUBLE_WORD_LOW      : <DOUBLE_WORD>
LENGTH               : <RECORD[LONG_SIZE]>
REMAINING_BYTES      : <RECORD[LONG_SIZE]>
ARRAY                : <NUM_ITEMS><ITEM_SIZE><ITEM_DATA>[<ITEM_SIZE><ITEM_DATA>]<EOR>
NUM_ITEMS            : <LONG_SIZE>
ITEM_SIZE            : <LONG_SIZE>
ITEM_DATA            : <DATA>
KEYS                 : <RECORD[KEYS_ARRAY]>
KEYS_ARRAY           : <ARRAY[DATA]>
VALUES               : <RECORD[VALUES_ARRAY]>
VALUES_ARRAY         : <ARRAY[DATA]>
RESPONSE_STATUSES    : <RECORD[STATUS_ARRAY]>
STATUS_ARRAY         : <ARRAY[STATUS]>
NODES_LIST           : <RECORD[NODES_STRING]>
NODES_STRING         : <LABEL><:><ADDRESS><:><PORT>[<,><LABEL><:><ADDRESS><:><PORT>...]
LABEL                : <STRING>
ADDRESS              : <STRING>
PORT                 : <STRING>
,                    : 0x2C
:                    : 0x3A
STRING               : <DATA>


The implemented messages in libshardcache are the following:
(REPLICA messages are not included, refer to docs/replica_protocol.txt
 for details about their format)


GET               : <MSG_GET><KEY><EOM>
                    RESPONSE: <MSG_RESPONSE><LENGTH><VALUE><RESPONSE_STATUS><EOM>

GET_ASYNC         : <MSG_GET_ASYNC><KEY><EOM>
                    RESPONSE: <MSG_RESPONSE><LENGTH><VALUE><RESPONSE_STATUS><EOM>

GET_OFFSET        : <MSG_GET_OFFSET><KEY><OFFSET><LENGTH><EOM>
                    RESPONSE: <MSG_RESPONSE><LENGTH><VALUE><REMAINING_BYTES><EOM>

EXISTS            : <MSG_EXISTS><KEY><EOM>
                    RESPONSE: <MSG_RESPONSE><RESPONSE_BSTATUS><EOM>

TOUCH             : <MSG_TOUCH><KEY><EOM>
                    RESPONSE: <MSG_RESPONSE><RESPONSE_STATUS<<EOM>

SET               : <MSG_SET><KEY><VALUE>[<TTL>[<CTTL>]]<EOM>
                    RESPONSE: <MSG_RESPONSE><RESPONSE_STATUS><EOM>

ADD               : <MSG_ADD><KEY><VALUE>[<TTL>[<CTTL>]]<EOM>
                    RESPONSE: <MSG_RESPONSE><RESPONSE_CSTATUS><EOM>

DELETE            : <MSG_DELETE><KEY><EOM>
                    RESPONSE: <MSG_RESPONSE><RESPONSE_STATUS><EOM>

EVICT             : <MSG_EVICT><KEY><EOM>
                    RESPONSE: <MSG_RESPONSE><RESPONSE_STATUS><EOM>

GET_MULTI         : <MSG_GET_MULTI><KEYS><EOM>
                    RESPONSE: <MSG_RESPONSE><VALUES><RESPONSE_STATUSES><EOM>

SET_MULTI         : <MSG_SET_MULTI><KEYS><VALUES><EOM>
                    RESPONSE: <MSG_RESPONSE><RESPONSE_STATUSES><EOM>

DELETE_MULTI      : <MSG_DELETE_MULTI><KEYS><EOM>
                    RESPONSE: <MSG_RESPONSE><RESPONSE_STATUSES><EOM>

EVICT_MULTI       : <MSG_EVICT_MULTI><KEYS><EOM>
                    RESPONSE: <MSG_RESPONSE><RESPONSE_STATUSES><EOM>

CAS               : <MSG_CAS><KEY><VALUE><VALUE><EOM>
                    RESPONSE: <MSG_RESPONSE><RESPONSE_STATUS><EOM>

INCREMENT         : <MSG_INCREMENT><KEY><EOM>
                    RESPONSE: <MSG_RESPONSE><RESPONSE_STATUS><EOM>

DECREMENT         : <MSG_DECREMENT><KEY><EOM>
                    RESPONSE: <MSG_RESPONSE><RESPONSE_STATUS><EOM>

MGB               : <MSG_MIGRATION_BEGIN><NODES_LIST><EOM>
RESPONSE          : <MSG_RESPONSE><RESPONSE_STATUS><EOM>

MGA               : <MSG_MIGRATION_ABORT><NULL_RECORD><EOM>
RESPONSE          : <MSG_RESPONSE><RESPONSE_STATUS><EOM>

MGE               : <MSG_MIGRATION_END><NULL_RECORD><EOM>
RESPONSE          : <MSG_RESPONSE><RESPONSE_STATUS><EOM>

STS               : <MSG_STATS><NULL_RECORD><EOM>
RESPONSE          : <MSG_RESPONSE><RESPONSE_RECORD><EOM>

CHK               : <MSG_CHECK><NULL_RECORD><EOM>
RESPONSE          : <MSG_RESPONSE><RESPONSE_STATUS><EOM>

IDG               : <MSG_GET_INDEX><NULL_RECORD><EOM>
RESPONSE          : <MSG_INDEX_RESPONSE><INDEX_RECORD><EOM>

NOTE: The index record contained in the MSG_INDEX_RESPONSE is encoded using
      a specific format



-------------------------------------------------------------------------------

Protocol extensions for signature/crc:

SIG              : <SIG_MSG> | <CSIG_MSG>
SIG_MSG          : <MAGIC><SIG_HDR><MESSAGE><SIG>
CSIG_MSG         : <MAGIC><CSIG_HDR><HDR><CSIG><CSIG_RECORD>[<RSEP><CSIG><CSIG_RECORD>...]<EOM><CSIG>
SIG_HDR          : <HDR_SIG_SIPHASH>
CSIG_HDR         : <HDR_CSIG_SIPHASH>
HDR_SIG_SIPHASH  : 0xF0
HDR_CSIG_SIPHASH : 0xF1
CSIG_RECORD      : <SIZE><DATA><SIG>[<SIZE><DATA><SIG>...]<EOR>
SIG              : <BYTE>[8]
CSIG             : <BYTE>[8]

-------------------------------------------------------------------------------

The signature header SIG_HDR defines the signature algorithm applied and 
if chunk-signing has been used instead of  simple-signing.
The least significative bit in the SIG_HDR byte determines if chunk-signing is
enabled

- simple-signing : There is only one signature applied at the end of the message
                   and which signs the entire message as a whole.

                    <SIG_HDR><HDR><SIZE><CHUNK>[<SIZE><CHUNK>...]<EOR><EOM><SIG>
                      0xF0   |---------------------S----------------------|


- chunk-signing  : Each chunk of the message has been signed independently
                   (which allows asynchronous read/flush of big messages without
                   the need of accumulating them in-memory)

    <CSIG_HDR><HDR><SIG><SIZE><CHUNK><SIG>[<SIZE><CHUNK><SIG>...]<EOR><EOM><SIG>
       0xF1   |-S-|     |-----S-----|      |-----S-----|         |----S---|


NOTE: The actual protocol implementation supports only SIPHASH signatures.
      The SIG_HDR defined for SIPHASH is 0xF0 (0xF1 if chunk-signing).
      The SIPHASH context is unique per message also when using chunk-signing

-------------------------------------------------------------------------------


The layout for an empty (but still valid) message would be :

===============================================================================
|  FIELD   |  SIZE   |  DESC                                                  |
|----------|---------|--------------------------------------------------------|
|   HDR    | 1 Byte  |  The message type                                      |
|----------|---------|--------------------------------------------------------|
|   EOR    | 2 Bytes |  End Of Record (0x00, 0x00)                            |
|----------|---------|--------------------------------------------------------|
|   EOM    | 1 Byte  |  Message Terminator (0x00)                             |
-------------------------------------------------------------------------------

A message containing one record (fitting a single chunk) would look like :

===============================================================================
|  FIELD   |  SIZE   |  DESC                                                  |
|----------|---------|--------------------------------------------------------|
|   HDR    | 1 Byte  |  The message type                                      |
|----------|---------|--------------------------------------------------------|
|   SIZE   | 2 Bytes |  The length of the following chunk of data             |
|          |         |  (in network byte order)                               |
|----------|---------|--------------------------------------------------------|
|   DATA   | N Bytes |  The actual chunk of data                              |
|----------|---------|--------------------------------------------------------|
|   EOR    | 2 Bytes |  End Of Record (0x00, 0x00)                            |
|----------|---------|--------------------------------------------------------|
|   EOM    | 1 Byte  |  Message Terminator (0x00)                             |
-------------------------------------------------------------------------------


A message containing 2 records,  for instance a 'SET' request where all
key, value and ttl need to be provided (still fitting in one chunk) :

===============================================================================
|  FIELD   |  SIZE   |  DESC                                                  |
|----------|---------|--------------------------------------------------------|
|   HDR    | 1 Byte  |  The message type                                      |
|----------|---------|--------------------------------------------------------|
|   SIZE   | 2 Bytes |  The length of the following chunk of data             |
|          |         |  (in network byte order)                               |
|----------|---------|--------------------------------------------------------|
|   DATA   | N Bytes |  The actual chunk of data                              |
|----------|---------|--------------------------------------------------------|
|   EOR    | 2 Bytes |  End Of Record (0x00, 0x00)                            |
|----------|---------|--------------------------------------------------------|
|   RSEP   | 1 Bytes |  Record Separator (0x80)                               |
|----------|---------|--------------------------------------------------------|
|   SIZE   | 2 Bytes |                                                        |
|----------|---------|--------------------------------------------------------|
|   DATA   | N Bytes |                                                        |
|----------|---------|--------------------------------------------------------|
|   RSEP   | 1 Bytes |  Record Separator (0x80)                               |
|----------|---------|--------------------------------------------------------|
|   SIZE   | 2 Bytes |  Size of the ttl record (must be 4 == 0x00,0x04)       |
|----------|---------|--------------------------------------------------------|
|   TTL    | 4 Bytes |  ttl in seconds (uint32_t in network byte order)       |
|----------|---------|--------------------------------------------------------|
|   RSEP   | 1 Bytes |  Record Separator (0x80)                               |
|----------|---------|--------------------------------------------------------|
|   SIZE   | 2 Bytes |  Size of the cttl record (must be 4 == 0x00,0x04)      |
|----------|---------|--------------------------------------------------------|
|   CTTL   | 4 Bytes |  cttl in seconds (uint32_t in network byte order)      |
|----------|---------|--------------------------------------------------------|
|   EOR    | 2 Bytes |  End Of Record (0x00, 0x00)                            |
|----------|---------|--------------------------------------------------------|
|   EOM    | 1 Byte  |  Message Terminator (0x00)                             |
-------------------------------------------------------------------------------



A more complex message with 2 records but not fitting in a single chunk would 
look like (this time without the ttl record):

===============================================================================
|  FIELD   |  SIZE   |  DESC                                                  |
|----------|---------|--------------------------------------------------------|
|   HDR    | 1 Byte  |  The message type                                      |
|----------|---------|--------------------------------------------------------|
|   SIZE   | 2 Bytes |  The length of the following chunk of data             |
|          |         |  (in network byte order)                               |
|----------|---------|--------------------------------------------------------|
|   DATA   | N Bytes |  The actual chunk of data                              |
|----------|---------|--------------------------------------------------------|
|    .     |   .     |                          .                             |
|----------|---------|--------------------------------------------------------|
|    .     |   .     |                          .                             |
|----------|---------|--------------------------------------------------------|
|    .     |   .     |                          .                             |
|----------|---------|--------------------------------------------------------|
|   SIZE   | 2 Bytes |                                                        |
|----------|---------|--------------------------------------------------------|
|   DATA   | N Bytes |                                                        |
|----------|---------|--------------------------------------------------------|
|   EOR    | 2 Bytes |  End Of Record (0x00, 0x00)                            |
|----------|---------|--------------------------------------------------------|
|   RSEP   | 1 Bytes |  Record Separator (0x80)                               |
|----------|---------|--------------------------------------------------------|
|   SIZE   | 2 Bytes |                                                        |
|----------|---------|--------------------------------------------------------|
|   DATA   | N Bytes |                                                        |
|----------|---------|--------------------------------------------------------|
|    .     |   .     |                          .                             |
|----------|---------|--------------------------------------------------------|
|    .     |   .     |                          .                             |
|----------|---------|--------------------------------------------------------|
|    .     |   .     |                          .                             |
|----------|---------|--------------------------------------------------------|
|   SIZE   | 2 Bytes |                                                        |
|----------|---------|--------------------------------------------------------|
|   DATA   | N Bytes |                                                        |
|----------|---------|--------------------------------------------------------|
|   EOR    | 2 Bytes |  End Of Record (0x00, 0x00)                            |
|----------|---------|--------------------------------------------------------|
|   EOM    | 1 Byte  |  Message Terminator (0x00)                             |
-------------------------------------------------------------------------------

NOTE: The protocol allows for an unlimited amount of records, even though 
      only 2 records have a practical use since no implemented message 
      makes use of more than 2 (apart SET, which requires both key and value,
      all other request types require only one record to be provided)


More Examples (The signature header and postfix are omitted for simplicity)

A GET message for the key FOO (hex sequence: 0x46 0x4f 0x4f) would look like:

<01><00><03><46><4f><4f><00><00><00>

-------------------------------------------------------------------------------

A SET message for the key FOO (hex sequence: 0x46 0x4f 0x4f)
assigning the value TEST (hex sequence: 0x54 0x45 0x53 0x54) would look like:

<02><00><03><46><4f><4f><00><00><80><00><04><54><45><53><54><00><00><00>

-------------------------------------------------------------------------------

A DEL message for the FOO would look exactly like a GET message but with a
different HDR value :

<03><00><03><46><4f><4f><00><00><00>

An EVI message would look exactly like a DEL message but with an HDR byte equal
to 0x04

-------------------------------------------------------------------------------

A RES message containing an <OK> response byte looks like:

<99><00><01><00><00><00><00>

-------------------------------------------------------------------------------

A RES with an empty value (for instance if querying a not-existing key):

<99><00><00><00>

-------------------------------------------------------------------------------

NOTES:


A signed message MUST be wrapped with a SIG_HDR prefix and a SIG postfix.
The SIG postfix is a siphash digest computed using a shared secret and the
complete message (obviously excluding the signature itself)

The signature is optional and can be omitted.

Responses to 'GET' requests will return the value for the requested key
if found, an empty value otherwise

Responses to 'SET', 'DEL' and 'EVI' requests will return either the
<OK> response byte or the <ERR> one depending on the status of the operation

'SET' commands have 2 optional arguments 'TTL' and 'CTTL'.
  - 'TTL'  : if not 0 marks the value as being volatile and determines how long
             it will be kept in the volatile storage.
  - 'CTTL' : if not 0 and 'set_on_cache' is true, determines how long the value
             will be kept into the cache (and also triggers the 'cache_on_load'
             behaviour for the actual key being set))
             implementations of protocol version == 1 should just ignore the
             'CTTL' parameter

The following commands are supported only by protocol versions >= 2:
  - 'CAS'
  - 'GET_MULTI'
  - 'SET_MULTI'
  - 'DELETE_MULTI'
  - 'EVICT_MULTI'
  - 'INCREMENT'
  - 'DECREMENT'

The 'STATUS' record in responses to GET and GET_ASYNC commands will be included
only if the requests was done using a protocol version >= 2
(otherwise it will be omitted)

The actual implementation will try reusing connections so they won't be closed
after serving a response. This should be taken into account when implementing
the protocol so that data is passed up to the application as soon as a complete
response is read
