* Data structures involved *
typedef enum {
    CMD_TYPE_SET,
    CMD_TYPE_DEL,
    CMD_TYPE_EVICT
} replica_cmd_type_t;

typedef struct {
    replica_cmd_type_t type;
    uint32_t seq;
    void *value;
    size_t vlen;
} replica_cmd_t;

typedef struct {
    sqlite3 *log;
    hashtable_t *commands; // key => cmd
    hashtable_t *ballots;  // node_label => last ballot seen
} replica_t;

--------------------------------------------------------------------------------------

* Replica protocol extensions *

PRE_ACCEPT:    <BALLOT><KEY><SEQ>
PRE_ACCEPT_OK: <BALLOT><KEY><SEQ>
ACCEPT:        <BALLOT><KEY><SEQ>
ACCEPT_OK:     <BALLOT><KEY><SEQ>
COMMIT:        <BALLOT><KEY><SEQ><CMD><DATA>
COMMIT_OK:     <BALLOT><KEY><SEQ>

--------------------------------------------------------------------------------------
* Local log implementation*

Implemented using an sqlite database with the following table

CREATE TABLE ReplicaLog (ballot int, keyhash1 int, keyhash2 int, seq int, cmd int, PRIMARY KEY(keyhash1, keyhash2))

--------------------------------------------------------------------------------------

* Pseudo code  (Based on EPAXOS but adapted/simplified for the specific usage in libshardcache) *

NOTE: Any access to the LOG and to RUNNING_COMMANDS must be serialized through a mutex
      to ensure consistency (the same mutex should be used for access to both the datastructure)

============= Phase 1: Pre-Accept ==================

=== Replica R1 receives a new set/del/evict request for key K:

    2: SEQ := LOAD_FROM_LOG(K)
    3: INTERFERING_SEQ := RUNNING_COMMANDS->K->SEQ || 0
    4: SEQ = MAX(SEQ, INTERFERING_SEQ)
    // an eventually uncommitted command for K would be overwritten here
    // hence it will be ignored and will fail silently
    // (NOTE: in libshardcache we only care about the most recent command for a key 
    //        and not about the entire sequence of commands)
    5: RUNNING_COMMANDS->K = { SEQ: SEQ, CMD: CMD, DATA: DATA, STATUS: PRE_ACCEPTED }
    7: SEND_PRE_ACCEPT([ R2..RN ], K, SEQ)

=== Any replica R receiving a PRE_ACCEPT(BALLOT, K, SEQ) from R1:

    2:   LOCAL_SEQ := LOAD_FROM_LOG(K)
    3:   INTERFERING_SEQ := MAX(RUNNING_COMMANDS->K->SEQ || 0)
    4:   MAX_SEQ = MAX(SEQ, LOCAL_SEQ, INTERFERING_SEQ)
    5:   IF MAX_SEQ == SEQ:
    5.1:     RUNNING_COMMANDS->K = { SEQ: SEQ, CMD: CMD, STATUS: PRE_ACCEPTED }
    6:   COMMITTED := (MAX_SEQ == LOCAL_SEQ) ? TRUE : FALSE
    8:   RETURN_PRE_ACCEPT(R1, K, MAX_SEQ, COMMITTED)

=== Replica R1 on receiving at least N/2 PRE_ACCEPT responses:

    1:   IF SEQ >= GET_SEQ(ALL_RESPONSES):
    1.1:     COMMIT(++LOCAL_BALLOT, K, SEQ, CMD, DATA) -> Short path, jump to the Commit phase (Phase 3)
    2:   ELSE:
    2.1:     SEQ = MAX(SEQ, GET_SEQ(ALL_RESPONSES))
    2.2:     IF COMMITTED(SEQ):
    2.2.1:       REQUEST_VALUE(REPLICA(SEQ), K) -> We are outdated, fetch the most updated data for K
    2.3:     ELSE:
    2.3.1:       RUN_ACCEPT_PHASE(++LOCAL_BALLOT, K, SEQ) -> Long path, use the Paxos-like protocol to obtain consensus

============= Phase 2: Paxos-Accept ==================

=== Accept phase - Command leader R1

    1:     SEND_ACCEPT([ SUBSET(R2..RN, N/2) ], ++LOCAL_BALLOT, K, SEQ)

=== Any replica R receiving an ACCEPT(BALLOT, K, SEQ) from R1

    1:   OK = FALSE
    1:   IF SEQ >= RUNNING_COMMANDS->K->SEQ:
    1.1:     RUNNING_COMMANDS->K->SEQ = SEQ
    1.2:     RUNNING_COMMANDS->K->STATUS = ACCEPTED
    1.3:     OK = TRUE
    2:   IF OK:
    2.1:     RETURN_ACCEPT(R1, BALLOT, OK, K, SEQ)
    3:   ELSE:
    4:       RETURN_ACCEPT(R1, BALLOT, FAIL, K, RUNNING_COMMANDS->K->SEQ)

=== Command leader R1 receives at least N/2 OK responses (accepting its seq and ballot)

    1:   RUNNING_COMMANDS->K->STATUS = ACCEPTED
    2:   COMMIT(LOCA_BALLOT, K, SEQ, CMD, DATA)

=== Command leader R1 doesn't receive enough OK responses (too few or accepting an higher sequence or ballot)

    1:   MAX_SEQ = MAX(SEQ, GET_SEQ(ALL_RESPONSES))
    // check if our status has been invalidated in the meanwhile by some further set
    2:   IF: RUNNING_COMMANDS->K->SEQ <= MAX_SEQ 
    2.1:     RUNNING_COMMANDS->K->SEQ = MAX_SEQ + 1
    3:   RUN_ACCEPT_PHASE(++LOCAL_BALLOT, K, RUNNING_COMMANDS->K->SEQ) -> run the Paxos-like protocol again incrementing the seq

============= Phase 3: Commit(BALLOT) ==================

=== Command leader R1 for key K and seq SEQ

    1: EXECUTE_COMMAND(CMD, K, DATA)
    2: WRITE_TO_LOG(K, SEQ)
    3: RUNNING_COMMANDS->K = NULL
    4: SEND_STATUS(client)
    5: SEND_COMMIT([ R2..RN ], BALLOT, K, SEQ, CMD, DATA)

=== Any replica R on receiving a COMMIT(BALLOT, K, SEQ, CMD, DATA) message

    1:   LAST_RECORDED_SEQ := LOAD_FROM_LOG(K)
    2:   IF SEQ <= LAST_RECORDED_SEQ:
    2.1:     IGNORE(K, SEQ)
    2.2:     RETURN
    3:   EXECUTE_COMMAND(CMD, K, DATA)
    4:   WRITE_TO_LOG(K, SEQ)
    5:   IF SEQ == RUNNING_COMMANDS->K->SEQ:
    5.1:     RUNNING_COMMANDS->K = NULL

--------------------------------------------------------------------------------------

Recovery procedure for a failed replica: 

    1   Check the ReplicaLog for the highest ballot we know about
    2   Asks all the other replicas about their ballot
    3   Collect answers from all the replicas (with a timeout)
    4   *If* a majority of replicas answered
    4.1 Select the replica reporting the highest ballot among the answers
    4.2     GOTO 6
    5   *Else*
    5.1     GOTO 2
    6   Ask the selected replica for the entire log from our known ballot to the one it reported
